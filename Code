#include <SFML/Graphics.hpp>
#include <SFML/Window.hpp>
#include <iostream>
#include <vector>
#include <ctime>

using namespace sf;

// Constants
const int WIDTH = 10;       // Width of the grid
const int HEIGHT = 20;      // Height of the grid
const int TILE_SIZE = 40;   // Size of each block (in pixels)

// Tetromino shapes
int tetrominoes[7][4] = {
    {1, 3, 5, 7}, // I-shape
    {2, 4, 5, 7}, // Z-shape
    {3, 5, 4, 6}, // S-shape
    {3, 5, 4, 7}, // T-shape
    {2, 3, 5, 7}, // L-shape
    {3, 5, 7, 6}, // J-shape
    {2, 3, 4, 5}  // O-shape
};

struct Point {
    int x, y;
};

Point block[4], temp[4];
int field[HEIGHT][WIDTH] = { 0 };

// Function to check collision
bool checkCollision() {
    for (int i = 0; i < 4; i++) {
        if (block[i].x < 0 || block[i].x >= WIDTH || block[i].y >= HEIGHT) {
            return true;
        }
        if (block[i].y >= 0 && field[block[i].y][block[i].x]) {
            return true;
        }
    }
    return false;
}

// Main function
int main() {
    srand(static_cast<unsigned int>(time(0)));

    RenderWindow window(VideoMode(WIDTH * TILE_SIZE, HEIGHT * TILE_SIZE), "Tetris Game");
    window.setFramerateLimit(60);

    Font font;
    if (font.loadFromFile("CENTURY.ttf")) {
        std::cerr << "Error: Could not load font!" << std::endl;
        return -1;
    }

    Text scoreText;
    scoreText.setFont(font);
    scoreText.setCharacterSize(24);
    scoreText.setFillColor(Color::White);
    scoreText.setPosition(10, 10);

    int score = 0;
    int currentPiece = rand() % 7;
    int color = 1;
    float timer = 0, delay = 0.9f;
    bool gameOver = false;

    Clock clock;

    // Game loop
    float horizontalTimer = 0.09f;    // Timer for horizontal movement
    float horizontalDelay = 0.7f;// Delay for horizontal movement (in seconds)

    while (window.isOpen()) {
        float time = clock.restart().asSeconds();
        timer += time;
        horizontalTimer += time; // Update horizontal movement timer

        Event event;
        while (window.pollEvent(event)) {
            if (event.type == Event::Closed) {
                window.close();
            }
        }

        if (!gameOver) {
            // Keyboard controls
            if (Keyboard::isKeyPressed(Keyboard::Left) && horizontalTimer > horizontalDelay)
            {
                for (int i = 0; i < 4; i++)
                {
                    temp[i] = block[i];
                    block[i].x--;
                }
                if (checkCollision())
                {
                    for (int i = 0; i < 4; i++) {
                        block[i] = temp[i];
                    }
                }
            }
            if (Keyboard::isKeyPressed(Keyboard::Right) && horizontalTimer > horizontalDelay) {
                for (int i = 0; i < 4; i++) {
                    temp[i] = block[i];
                    block[i].x++;
                }
                if (checkCollision()) {
                    for (int i = 0; i < 4; i++) {
                        block[i] = temp[i];
                    }
                    horizontalTimer = 0;
                }
            }

            if (Keyboard::isKeyPressed(Keyboard::Right) && horizontalTimer > horizontalDelay)
            {
                for (int i = 0; i < 4; i++)
                {
                    temp[i] = block[i];
                    block[i].x++;
                }
                if (checkCollision())
                {
                    for (int i = 0; i < 4; i++)
                    {
                        block[i] = temp[i];
                    }
                }
                horizontalTimer = 0; // Reset timer
            }
            if (Keyboard::isKeyPressed(Keyboard::Down)) {
                delay = 0.09f;
            }
            else {
                delay = 0.7f;
            }

            if (Keyboard::isKeyPressed(Keyboard::Up)) {
                Point center = block[1];
                for (int i = 0; i < 4; i++) {
                    int dx = block[i].y - center.y;
                    int dy = block[i].x - center.x;
                    block[i].x = center.x - dx;
                    block[i].y = center.y + dy;
                }
                if (checkCollision()) {
                    for (int i = 0; i < 4; i++) {
                        block[i] = temp[i];
                    }
                }
            }

            // Timer-based movement
            if (timer > delay) {
                for (int i = 0; i < 4; i++) {
                    temp[i] = block[i];
                    block[i].y++;
                }
                if (checkCollision()) {
                    for (int i = 0; i < 4; i++) {
                        field[temp[i].y][temp[i].x] = color;
                    }

                    currentPiece = rand() % 7;
                    color = 1 + rand() % 6;
                    for (int i = 0; i < 4; i++) {
                        block[i].x = tetrominoes[currentPiece][i] % 2 + WIDTH / 2 - 1;
                        block[i].y = tetrominoes[currentPiece][i] / 2;
                    }

                    if (checkCollision()) {
                        gameOver = true;
                    }
                }
                timer = 0;
            }

            // Check for completed lines
            int k = HEIGHT - 1;
            for (int i = HEIGHT - 1; i >= 0; i--) {
                int count = 0;
                for (int j = 0; j < WIDTH; j++) {
                    if (field[i][j]) {
                        count++;
                    }
                    field[k][j] = field[i][j];
                }
                if (count < WIDTH) {
                    k--;
                }
                else {
                    score += 10;
                }
            }
        }

        // Drawing
        window.clear(Color(135, 206, 235));

        RectangleShape blockShape(Vector2f(TILE_SIZE - 1, TILE_SIZE - 1));
        blockShape.setOutlineColor(Color::Yellow);
        blockShape.setOutlineThickness(3);

        // Draw field
        for (int i = 0; i < HEIGHT; i++) {
            for (int j = 0; j < WIDTH; j++) {
                if (field[i][j]) {
                    blockShape.setFillColor(Color(field[i][j] * 40, field[i][j] * 30, field[i][j] * 60));
                    blockShape.setPosition(j * TILE_SIZE, i * TILE_SIZE);
                    window.draw(blockShape);
                }
            }
        }

        // Draw current piece
        for (int i = 0; i < 4; i++) {
            blockShape.setFillColor(Color(color * 40, color * 30, color * 60));
            blockShape.setPosition(block[i].x * TILE_SIZE, block[i].y * TILE_SIZE);
            window.draw(blockShape);
        }

        // Draw score
        scoreText.setString("Score: " + std::to_string(score));
        window.draw(scoreText);

        // Draw "GAME OVER" message
        if (gameOver) {
            Text gameOverText("GAME OVER", font, 20);
            gameOverText.setFillColor(Color::Red);
            gameOverText.setPosition(WIDTH * TILE_SIZE / 4, HEIGHT * TILE_SIZE / 2 - 50);
            window.draw(gameOverText);
        }

        window.display();
    }

    return 0;
}
